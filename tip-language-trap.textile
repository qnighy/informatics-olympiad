---
layout: default
title: 競技プログラミングで陥りやすい言語仕様の罠
writer: qnighy
---

競技プログラミングでは手続き型言語として必要な最低限度の言語仕様さえ覚えておけば問題ないとされることが多い。

その一方で、ある種の特殊な言語仕様を知らないことによって特殊なバグに悩まされることも少なくない。

そこでここでは、そのような競技者の嵌りやすい罠を見つけ次第挙げていきたい。

h2. CとC++の配列初期化の罠

{% highlight cpp %}
int array[128] = {0};
{% endhighlight %}

これはC言語において一般的な配列の初期化である。これは簡単に言ってしまえば、arrayの中身を全て0で初期化する。

しかしこれを次のようにしてはいけない。

{% highlight cpp %}
int array[128] = {-1}; // バグの原因！
{% endhighlight %}

これは *最初の項目だけを* -1で初期化する。

詳しい理由は "本の虫: 多くのプログラマは言語を表面的な理解だけで使っている":http://cpplover.blogspot.com/2010/09/blog-post_18.html などを参照してほしい。

h2. 演算子の優先順位

特にビット演算が関係する計算式には注意すること。

{% highlight cpp %}
int dp[ 1<<MAX_N + 5 ]; // バグの原因！
{% endhighlight %}

{% highlight cpp %}
while( a&b == 1 ) {} // バグの原因！
{% endhighlight %}

boolean型が特別視されるJavaでは後者は見つけやすいが、前者は発見できない。

注意が必要である。

参考: "C++ 演算子の優先順位 [C++ Reference]":http://www.cppreference.com/wiki/jp/operator_precedence

h2. CやC++の特別な変数名

CやC++ではアンダースコア(_)で始まる変数名は予約語と同様の扱いであり、それがユーザー定義の識別子として扱われることは保証されない。

まさか実際に当たるとは思わないものだが、実際に当たってしまった人がいたのでここに書こう。_endである。

{% highlight cpp %}
int _end = 0; // gccが定義するシンボル
{% endhighlight %}

"Local Storage の空きメモリを取得する (きっちん)":http://yoffy.dyndns.org/2007/01/local_storage.html を参照。

これによってプログラムが非常に意味不明な挙動をし、原因を把握するのに時間がかかったケースがあったので、ぜひ気をつけて頂きたい。

h2. scanfの罠(1)
{% highlight cpp %}
scanf("%c", &c); // 空白も一文字とみなすから注意！
scanf("%s", s); // 空白の直前で打ち止めするので注意！
{% endhighlight %}

次のようにするといいことが多い。
{% highlight cpp %}
scanf(" %c", &c); // 空白を飛ばしてから読む
scanf("%[a-zA-Z 0-9_]", s); // アルファベットと数字とアンダースコアとスペースが出てくる間は読み込む
{% endhighlight %}

h2. scanfの罠(2)
{% highlight cpp %}
double d;
float f;
scanf("%f%lf", &f, &d); // fはfloat, dはdouble
printf("%f%f", f, d); // fはdouble (floatは自動でdoubleに変換される。)
printf("%lf", d); // これはC99より前は非標準
{% endhighlight %}
この非対称な挙動はあまり知られていない。最後に述べた非標準な挙動がサポートされることが多いからである。

h2. strlenはO(n)

Cの文字列の仕様から明らかではあるが、strlenはO(n)である。
{% highlight cpp %}
for(int i = 0; i < strlen(s); i++) {} // オーダー的に危険
{% endhighlight %}
